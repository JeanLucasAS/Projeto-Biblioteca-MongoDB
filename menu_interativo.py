from book_manager import BookManager

class MenuInterativo:
    def __init__(self):
        self.manager = BookManager("mongodb+srv://jeanlucas:o8AjoadIRyvbxDc3@cluster0.f7tzj2o.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0")

    
    def exibir_menu(self):
        """
        Exibe o menu principal
        """
        print("\n" + "=" * 50)
        print("üìö SISTEMA DE GERENCIAMENTO DE BIBLIOTECA")
        print("=" * 50)
        print("1. üìñ Inserir novo livro")
        print("2. üîç Buscar livro por ISBN")
        print("3. üë§ Listar livros por autor")
        print("4. üè∑Ô∏è  Listar livros por g√™nero")
        print("5. üìÖ Listar livros por ano")
        print("6. üìè Top 10 livros com mais p√°ginas")
        print("7. üìñ Top 10 livros com menos p√°ginas")
        print("8. ‚úèÔ∏è  Atualizar livro")
        print("9. üóëÔ∏è  Deletar livro")
        print("10. üìä Estat√≠sticas da biblioteca")
        print("11. üìã Listar todos os livros")
        print("0. üö™ Sair")
        print("-" * 50)
    
    def inserir_livro_interativo(self):
        """
        Interface para inserir um novo livro
        """
        print("\nüìñ INSERIR NOVO LIVRO")
        print("-" * 30)
        
        try:
            livro = {
                "titulo": input("T√≠tulo: ").strip(),
                "autor": input("Autor: ").strip(),
                "ano_publicacao": int(input("Ano de publica√ß√£o: ")),
                "genero": input("G√™nero: ").strip(),
                "num_paginas": int(input("N√∫mero de p√°ginas: ")),
                "sinopse": input("Sinopse: ").strip(),
                "isbn": input("ISBN: ").strip()
            }
            
            self.manager.inserir_livro(livro)
            
        except ValueError:
            print("‚ùå Erro: Ano e n√∫mero de p√°ginas devem ser n√∫meros inteiros!")
        except Exception as e:
            print(f"‚ùå Erro ao inserir livro: {e}")
    
    def buscar_por_isbn_interativo(self):
        """
        Interface para buscar livro por ISBN
        """
        print("\nüîç BUSCAR LIVRO POR ISBN")
        print("-" * 30)
        
        isbn = input("Digite o ISBN: ").strip()
        if isbn:
            self.manager.buscar_livro_por_isbn(isbn)
        else:
            print("‚ùå ISBN n√£o pode estar vazio!")
    
    def listar_por_autor_interativo(self):
        """
        Interface para listar livros por autor
        """
        print("\nüë§ LISTAR LIVROS POR AUTOR")
        print("-" * 30)
        
        autor = input("Digite o nome do autor: ").strip()
        if autor:
            self.manager.listar_livros_por_autor(autor)
        else:
            print("‚ùå Nome do autor n√£o pode estar vazio!")
    
    def listar_por_genero_interativo(self):
        """
        Interface para listar livros por g√™nero
        """
        print("\nüè∑Ô∏è LISTAR LIVROS POR G√äNERO")
        print("-" * 30)
        
        genero = input("Digite o g√™nero: ").strip()
        if genero:
            self.manager.listar_livros_por_genero(genero)
        else:
            print("‚ùå G√™nero n√£o pode estar vazio!")
    
    def listar_por_ano_interativo(self):
        """
        Interface para listar livros por ano
        """
        print("\nüìÖ LISTAR LIVROS POR ANO")
        print("-" * 30)
        
        try:
            ano = int(input("Digite o ano: "))
            self.manager.listar_livros_por_ano(ano)
        except ValueError:
            print("‚ùå Erro: Ano deve ser um n√∫mero inteiro!")
    
    def atualizar_livro_interativo(self):
        """
        Interface para atualizar um livro
        """
        print("\n‚úèÔ∏è ATUALIZAR LIVRO")
        print("-" * 30)
        
        isbn = input("Digite o ISBN do livro a ser atualizado: ").strip()
        if not isbn:
            print("‚ùå ISBN n√£o pode estar vazio!")
            return
        
        # Primeiro, mostrar o livro atual
        livro_atual = self.manager.buscar_livro_por_isbn(isbn)
        if not livro_atual:
            return
        
        print("\nDigite os novos valores (deixe em branco para manter o valor atual):")
        
        novos_dados = {}
        
        # Campos que podem ser atualizados
        campos = {
            "titulo": "T√≠tulo",
            "autor": "Autor", 
            "ano_publicacao": "Ano de publica√ß√£o",
            "genero": "G√™nero",
            "num_paginas": "N√∫mero de p√°ginas",
            "sinopse": "Sinopse"
        }
        
        for campo, label in campos.items():
            valor_atual = livro_atual.get(campo, "")
            novo_valor = input(f"{label} (atual: {valor_atual}): ").strip()
            
            if novo_valor:
                if campo in ["ano_publicacao", "num_paginas"]:
                    try:
                        novos_dados[campo] = int(novo_valor)
                    except ValueError:
                        print(f"‚ùå Erro: {label} deve ser um n√∫mero inteiro!")
                        return
                else:
                    novos_dados[campo] = novo_valor
        
        if novos_dados:
            self.manager.atualizar_livro(isbn, novos_dados)
        else:
            print("‚ÑπÔ∏è Nenhum campo foi alterado.")
    
    def deletar_livro_interativo(self):
        """
        Interface para deletar um livro
        """
        print("\nüóëÔ∏è DELETAR LIVRO")
        print("-" * 30)
        
        isbn = input("Digite o ISBN do livro a ser deletado: ").strip()
        if not isbn:
            print("‚ùå ISBN n√£o pode estar vazio!")
            return
        
        # Mostrar o livro antes de deletar
        livro = self.manager.buscar_livro_por_isbn(isbn)
        if not livro:
            return
        
        confirmacao = input("\n‚ö†Ô∏è Tem certeza que deseja deletar este livro? (s/N): ").strip().lower()
        if confirmacao == 's':
            self.manager.deletar_livro(isbn)
        else:
            print("‚ÑπÔ∏è Opera√ß√£o cancelada.")
    
    def mostrar_estatisticas(self):
        """
        Mostra estat√≠sticas da biblioteca
        """
        print("\nüìä ESTAT√çSTICAS DA BIBLIOTECA")
        print("-" * 30)
        
        total = self.manager.contar_livros()
        
        if total > 0:
            # Estat√≠sticas adicionais
            try:
                pipeline = [
                    {"$group": {
                        "_id": "$genero",
                        "count": {"$sum": 1}
                    }},
                    {"$sort": {"count": -1}}
                ]
                
                generos = list(self.manager.collection.aggregate(pipeline))
                
                print(f"\nüìà Distribui√ß√£o por g√™nero:")
                for genero in generos:
                    print(f"  - {genero['_id']}: {genero['count']} livro(s)")
                
                # M√©dia de p√°ginas
                pipeline_media = [
                    {"$group": {
                        "_id": None,
                        "media_paginas": {"$avg": "$num_paginas"},
                        "total_paginas": {"$sum": "$num_paginas"}
                    }}
                ]
                
                resultado = list(self.manager.collection.aggregate(pipeline_media))
                if resultado:
                    media = resultado[0]['media_paginas']
                    total_pag = resultado[0]['total_paginas']
                    print(f"\nüìè M√©dia de p√°ginas por livro: {media:.1f}")
                    print(f"üìö Total de p√°ginas na biblioteca: {total_pag:,}")
                
            except Exception as e:
                print(f"‚ùå Erro ao calcular estat√≠sticas: {e}")
    
    def executar(self):
        """
        Loop principal do menu interativo
        """
        print("üéâ Bem-vindo ao Sistema de Gerenciamento de Biblioteca!")
        
        while True:
            try:
                self.exibir_menu()
                opcao = input("Escolha uma op√ß√£o: ").strip()
                
                if opcao == "0":
                    print("\nüëã Obrigado por usar o sistema! At√© logo!")
                    break
                elif opcao == "1":
                    self.inserir_livro_interativo()
                elif opcao == "2":
                    self.buscar_por_isbn_interativo()
                elif opcao == "3":
                    self.listar_por_autor_interativo()
                elif opcao == "4":
                    self.listar_por_genero_interativo()
                elif opcao == "5":
                    self.listar_por_ano_interativo()
                elif opcao == "6":
                    self.manager.listar_livros_mais_paginas(10)
                elif opcao == "7":
                    self.manager.listar_livros_menos_paginas(10)
                elif opcao == "8":
                    self.atualizar_livro_interativo()
                elif opcao == "9":
                    self.deletar_livro_interativo()
                elif opcao == "10":
                    self.mostrar_estatisticas()
                elif opcao == "11":
                    self.manager.listar_todos_livros()
                else:
                    print("‚ùå Op√ß√£o inv√°lida! Tente novamente.")
                
                input("\n‚è∏Ô∏è Pressione Enter para continuar...")
                
            except KeyboardInterrupt:
                print("\n\nüëã Sistema encerrado pelo usu√°rio. At√© logo!")
                break
            except Exception as e:
                print(f"‚ùå Erro inesperado: {e}")
                input("\n‚è∏Ô∏è Pressione Enter para continuar...")
        
        # Fechar conex√£o
        self.manager.fechar_conexao()

def main():
    """
    Fun√ß√£o principal para executar o menu interativo
    """
    menu = MenuInterativo()
    menu.executar()

if __name__ == "__main__":
    main()
